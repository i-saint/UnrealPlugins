import sys, os, pathlib, fnmatch, json, re, winreg

def findFiles(dir, pattern):
    result = []
    for child in dir.iterdir():
        if(fnmatch.fnmatch(child, pattern)):
            result.append(os.path.join(dir, child))
    return result

def findUproject():
    projectDir = pathlib.Path(sys.argv[0]).parent.resolve()
    uprojPath = None
    while projectDir.parent != projectDir:
        match = findFiles(projectDir, "*.uproject")
        if(len(match) != 0):
            uprojPath = match[0]
            break
        projectDir = projectDir.parent
    return uprojPath

def getUEInstallDir(ueVersion):
    try:
        regPath = r'SOFTWARE\EpicGames\Unreal Engine\\' + ueVersion
        hklm = winreg.HKEY_LOCAL_MACHINE
        regKey = winreg.OpenKey(hklm, regPath, 0, winreg.KEY_READ)
        ueDir = winreg.QueryValueEx(regKey, r'InstalledDirectory')[0]
        regKey.Close()
    except WindowsError:
        ueDir = None
    return ueDir

def findNoExportTypesH():
    uprojPath = findUproject()
    if(uprojPath == None):
        return None;
    uprojData = json.load(open(uprojPath))
    ueVersion = uprojData["EngineAssociation"]
    ueDir = getUEInstallDir(ueVersion)
    if(ueDir == None):
        return None;
    return ueDir + r'\Engine\Source\Runtime\CoreUObject\Public\UObject\NoExportTypes.h'


pathNoExportTypesH = sys.argv[1] if len(sys.argv) >= 2 else findNoExportTypesH()
inFile = open(pathNoExportTypesH, 'r').read()

currentDir = pathlib.Path(sys.argv[0]).parent.resolve()
outPath = str(currentDir.parent) + r'\Source\HTTPLink\Private\NoExportTypes.def.h'
outFile = open(outPath, 'w')
outFile.write('// generated by Resources/GenNoExportTypes.py\n\n')

patternEnum = re.compile(r'enum\s+class\s+(E[^\s]+)')
patternStruct = re.compile(r'struct\s+(F[^\s]+)')
patternClass = re.compile(r'class\s+(U[^\s]+)')

excludePatterns = [
    re.compile(r'\d+d\Z'),
    re.compile(r'^FInt32'),
    re.compile(r'^FUint32'),
    ]

outFile.write('// enum\n')
for m in patternEnum.finditer(inFile):
    outFile.write(f'DEF_ENUM({m.group(1)});\n')
outFile.write('\n')

outFile.write('// struct\n')
for m in patternStruct.finditer(inFile):
    ok = True
    for e in excludePatterns:
        if e.search(m.group(1)):
            print(m.group(1))
            ok = False
            break
    if ok:
        outFile.write(f'DEF_STRUCT({m.group(1)});\n')
outFile.write('\n')

outFile.write('// class\n')
for m in patternClass.finditer(inFile):
    outFile.write(f'DEF_CLASS({m.group(1)});\n')

